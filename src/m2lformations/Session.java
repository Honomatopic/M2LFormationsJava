/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package m2lformations;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Honoré
 */
public class Session extends javax.swing.JFrame {

    BDD bdd = new BDD();
    Connection connexion;
    PreparedStatement reqPreparee;
    ResultSet resultat;
    Integer resultatFormation;
    Integer resultatDuree;
    Integer resultatSalle;
    Integer resultatIntervenant;
    Integer resultatPrestataire;

    /**
     * Creates new form Sessionn
     */
    public Session() {
        initComponents();
        ImageIcon icone = new ImageIcon("C:\\netbeans-workspace\\m2lformations\\resources\\images\\m2l.png");
        this.setIconImage(icone.getImage());
        try {
            connexion = bdd.gestionnaireDeConnexion();
            reqPreparee = connexion.prepareStatement("SELECT * FROM Formation");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                comboFormations.addItem(resultat.getString("intitule").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement("SELECT * FROM duree");
            resultat = reqPreparee.executeQuery();

            while (resultat.next()) {
                comboDurees.addItem(resultat.getString("datedebut").toString() + " au " + resultat.getString("datefin").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement("SELECT * FROM salle");
            resultat = reqPreparee.executeQuery();

            while (resultat.next()) {
                comboSalles.addItem(resultat.getString("nom").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement("SELECT * FROM intervenant");
            resultat = reqPreparee.executeQuery();

            while (resultat.next()) {
                comboIntervenants.addItem(resultat.getString("nom").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement("SELECT * FROM prestataire");
            resultat = reqPreparee.executeQuery();

            while (resultat.next()) {
                comboPrestataires.addItem(resultat.getString("nom").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement("SELECT session.id, formation.intitule AS intitule_formation, \r\n"
                    + "        duree.datedebut, duree.datefin, \r\n" + "        salle.nom AS nom_salle, \r\n"
                    + "        intervenant.nom AS nom_intervenant, \r\n"
                    + "        prestataire.nom AS nom_prestataire\r\n" + "        FROM session  \r\n"
                    + "        JOIN formation ON session.formation_id = formation.id\r\n"
                    + "        JOIN duree ON session.duree_id = duree.id \r\n"
                    + "        JOIN salle ON session.salle_id = salle.id \r\n"
                    + "        JOIN intervenant ON session.intervenant_id = intervenant.id \r\n"
                    + "        JOIN prestataire ON session.prestataire_id = prestataire.id");
            resultat = reqPreparee.executeQuery();
            table.setModel(BDD.construireTable(resultat));
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        labelTitreSession = new javax.swing.JLabel();
        labelId = new javax.swing.JLabel();
        comboFormations = new javax.swing.JComboBox<>();
        labelTitreDuree = new javax.swing.JLabel();
        comboDurees = new javax.swing.JComboBox<>();
        comboSalles = new javax.swing.JComboBox<>();
        comboIntervenants = new javax.swing.JComboBox<>();
        comboPrestataires = new javax.swing.JComboBox<>();
        labelTitreIdEmploye = new javax.swing.JLabel();
        texteEmploye = new javax.swing.JTextField();
        boutonCreer = new javax.swing.JButton();
        boutonSupprimer = new javax.swing.JButton();
        boutonModifier = new javax.swing.JButton();
        boutonConsulter = new javax.swing.JButton();
        ScrollPaneSession = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("M2L Formations");

        labelTitreSession.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelTitreSession.setText("Les sessions de formation de l'association");

        labelId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        comboFormations.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboFormations.setMaximumRowCount(50);
        comboFormations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Les formations" }));

        labelTitreDuree.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelTitreDuree.setText("La durée : ");

        comboDurees.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboDurees.setMaximumRowCount(50);

        comboSalles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboSalles.setMaximumRowCount(50);
        comboSalles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Les salles" }));

        comboIntervenants.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboIntervenants.setMaximumRowCount(50);
        comboIntervenants.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Les intervenants" }));

        comboPrestataires.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboPrestataires.setMaximumRowCount(50);
        comboPrestataires.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Les prestataires" }));

        labelTitreIdEmploye.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelTitreIdEmploye.setText("L'Id de l'employé : ");

        texteEmploye.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        boutonCreer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonCreer.setText("Créer");
        boutonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCreerActionPerformed(evt);
            }
        });

        boutonSupprimer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonSupprimer.setText("Supprimer");
        boutonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonSupprimerActionPerformed(evt);
            }
        });

        boutonModifier.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonModifier.setText("Modifier");
        boutonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonModifierActionPerformed(evt);
            }
        });

        boutonConsulter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonConsulter.setText("Consulter les inscrptions de l'id");
        boutonConsulter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonConsulterActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        ScrollPaneSession.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelTitreSession, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(labelId, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(comboFormations, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                                .addComponent(labelTitreDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(boutonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(labelTitreIdEmploye)
                                        .addGap(69, 69, 69)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(texteEmploye)
                                    .addComponent(boutonSupprimer, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addComponent(comboSalles, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboIntervenants, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboPrestataires, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboDurees, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(boutonConsulter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(boutonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(ScrollPaneSession, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(labelTitreSession)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFormations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTitreDuree)
                    .addComponent(comboDurees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPrestataires, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboIntervenants, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSalles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitreIdEmploye, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(texteEmploye, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boutonConsulter))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonSupprimer)
                    .addComponent(boutonModifier)
                    .addComponent(boutonCreer))
                .addGap(26, 26, 26)
                .addComponent(ScrollPaneSession, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Méthode permettant d'initialiser par un clic gauche les champs de saisie
     * @param evt 
     */
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        int ligne = table.getSelectedRow();
        labelId.setText(table.getValueAt(ligne, 0).toString());
        comboFormations.setSelectedItem(table.getValueAt(ligne, 1).toString());
        comboDurees.setSelectedItem(table.getValueAt(ligne, 2).toString());
        comboSalles.setSelectedItem(table.getValueAt(ligne, 4).toString());
        comboIntervenants.setSelectedItem(table.getValueAt(ligne, 5).toString());
        comboPrestataires.setSelectedItem(table.getValueAt(ligne, 6).toString());
    }//GEN-LAST:event_tableMouseClicked

    /**
     * Méthode permettant de créer une session de formation
     * @param evt 
     */
    private void boutonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCreerActionPerformed
        // TODO add your handling code here:
        try {
            Connection connexion = bdd.gestionnaireDeConnexion();
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM formation WHERE intitule='" + comboFormations.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatFormation = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM duree WHERE datedebut='" + comboDurees.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatDuree = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion
                    .prepareStatement("SELECT id FROM salle WHERE nom='" + comboSalles.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatSalle = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM intervenant WHERE nom='" + comboIntervenants.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatIntervenant = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM prestataire WHERE nom='" + comboPrestataires.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatPrestataire = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement(
                    "INSERT INTO session (formation_id, duree_id, salle_id, intervenant_id, prestataire_id) VALUES ('"
                    + resultatFormation + "','" + resultatDuree + "','" + resultatSalle + "','"
                    + resultatIntervenant + "','" + resultatPrestataire + "')");
            int resultatinsert = reqPreparee.executeUpdate();
            if (resultatinsert != 0) {
                JOptionPane.showMessageDialog(boutonCreer, "La session a été créée", "Evènement crée",
                        JOptionPane.INFORMATION_MESSAGE);
                table.removeAll();
                reqPreparee = connexion.prepareStatement("SELECT session.id, formation.intitule AS intitule_formation, \r\n"
                        + "        duree.datedebut, duree.datefin, \r\n"
                        + "        salle.nom AS nom_salle, \r\n"
                        + "        intervenant.nom AS nom_intervenant, \r\n"
                        + "        prestataire.nom AS nom_prestataire\r\n"
                        + "        FROM session  \r\n"
                        + "        JOIN formation ON session.formation_id = formation.id\r\n"
                        + "        JOIN duree ON session.duree_id = duree.id \r\n"
                        + "        JOIN salle ON session.salle_id = salle.id \r\n"
                        + "        JOIN intervenant ON session.intervenant_id = intervenant.id \r\n"
                        + "        JOIN prestataire ON session.prestataire_id = prestataire.id");
                resultat = reqPreparee.executeQuery();
                table.setModel(BDD.construireTable(resultat));
            } else {
                JOptionPane.showMessageDialog(boutonCreer, "La session n'a pas été créée", "Evènement non crée",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_boutonCreerActionPerformed

    private void boutonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonSupprimerActionPerformed
        // TODO add your handling code here:
        try {
            connexion = bdd.gestionnaireDeConnexion();
            reqPreparee = connexion.prepareStatement("DELETE FROM session WHERE id='" + labelId.getText() + "'");
            int resultatsuppr = reqPreparee.executeUpdate();
            if (resultatsuppr != 0) {
                JOptionPane.showMessageDialog(boutonSupprimer, "La session a été supprimée", "Evénement supprimé",
                        JOptionPane.INFORMATION_MESSAGE);
                table.removeAll();
                reqPreparee = connexion.prepareStatement("SELECT session.id, formation.intitule AS intitule_formation, \r\n"
                        + "        duree.datedebut, duree.datefin, \r\n"
                        + "        salle.nom AS nom_salle, \r\n"
                        + "        intervenant.nom AS nom_intervenant, \r\n"
                        + "        prestataire.nom AS nom_prestataire\r\n"
                        + "        FROM session  \r\n"
                        + "        JOIN formation ON session.formation_id = formation.id\r\n"
                        + "        JOIN duree ON session.duree_id = duree.id \r\n"
                        + "        JOIN salle ON session.salle_id = salle.id \r\n"
                        + "        JOIN intervenant ON session.intervenant_id = intervenant.id \r\n"
                        + "        JOIN prestataire ON session.prestataire_id = prestataire.id");
                resultat = reqPreparee.executeQuery();
                table.setModel(BDD.construireTable(resultat));

            } else {
                JOptionPane.showMessageDialog(boutonSupprimer, "La session n'a pas été supprimée",
                        "Evènement non supprimé", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_boutonSupprimerActionPerformed

    private void boutonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonModifierActionPerformed
        // TODO add your handling code here:
        try {
            Connection connexion = bdd.gestionnaireDeConnexion();
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM formation WHERE intitule='" + comboFormations.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatFormation = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM duree WHERE datedebut='" + comboDurees.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatDuree = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion
                    .prepareStatement("SELECT id FROM salle WHERE nom='" + comboSalles.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatSalle = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM intervenant WHERE nom='" + comboIntervenants.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatIntervenant = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            reqPreparee = connexion.prepareStatement(
                    "SELECT id FROM prestataire WHERE nom='" + comboPrestataires.getSelectedItem() + "'");
            resultat = reqPreparee.executeQuery();
            while (resultat.next()) {
                resultatPrestataire = resultat.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            reqPreparee = connexion.prepareStatement("UPDATE session SET formation_id='" + resultatFormation
                    + "',duree_id='" + resultatDuree + "',salle_id='" + resultatSalle + "',intervenant_id='"
                    + resultatIntervenant + "',prestataire_id='" + resultatPrestataire + "' WHERE id='"
                    + labelId.getText() + "'");
            int resultatedite = reqPreparee.executeUpdate();
            if (resultatedite != 0) {
                JOptionPane.showMessageDialog(boutonModifier, "La session a été modifiée", "Evénement modifié",
                        JOptionPane.INFORMATION_MESSAGE);
                table.removeAll();
                reqPreparee = connexion.prepareStatement("SELECT session.id, formation.intitule AS intitule_formation, \r\n"
                        + "        duree.datedebut, duree.datefin, \r\n"
                        + "        salle.nom AS nom_salle, \r\n"
                        + "        intervenant.nom AS nom_intervenant, \r\n"
                        + "        prestataire.nom AS nom_prestataire\r\n"
                        + "        FROM session  \r\n"
                        + "        JOIN formation ON session.formation_id = formation.id\r\n"
                        + "        JOIN duree ON session.duree_id = duree.id \r\n"
                        + "        JOIN salle ON session.salle_id = salle.id \r\n"
                        + "        JOIN intervenant ON session.intervenant_id = intervenant.id \r\n"
                        + "        JOIN prestataire ON session.prestataire_id = prestataire.id");
                resultat = reqPreparee.executeQuery();
                table.setModel(BDD.construireTable(resultat));
            } else {
                JOptionPane.showMessageDialog(boutonModifier, "La session n'a pas été modifiée", "Evènement non modifié",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_boutonModifierActionPerformed

    private void boutonConsulterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonConsulterActionPerformed
        try {
            // TODO add your handling code here:
            Connection connexion = bdd.gestionnaireDeConnexion();
            reqPreparee = connexion
                    .prepareStatement("SELECT session.id, formation.intitule AS intitule_formation, \r\n"
                            + "    duree.datedebut, duree.datefin, \r\n" + "    salle.nom AS nom_salle, \r\n"
                            + "    intervenant.nom AS nom_intervenant, \r\n"
                            + "    prestataire.nom AS nom_prestataire\r\n" + "    FROM session \r\n"
                            + "    JOIN formation ON session.formation_id = formation.id\r\n"
                            + "    JOIN duree ON session.duree_id = duree.id\r\n"
                            + "    JOIN salle ON session.salle_id = salle.id \r\n"
                            + "    JOIN intervenant ON session.intervenant_id = intervenant.id\r\n"
                            + "    JOIN prestataire ON session.prestataire_id = prestataire.id\r\n"
                            + "    JOIN inscrire ON session.id = inscrire.session_id \r\n"
                            + "    JOIN employe ON inscrire.employe_id = employe.id\r\n"
                            + "    WHERE employe.id = '" + texteEmploye.getText() + "'");
            resultat = reqPreparee.executeQuery();
            table.setModel(BDD.construireTable(resultat));
        } catch (SQLException ex) {
            Logger.getLogger(Session.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_boutonConsulterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Session session = new Session();
                session.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneSession;
    private javax.swing.JButton boutonConsulter;
    private javax.swing.JButton boutonCreer;
    private javax.swing.JButton boutonModifier;
    private javax.swing.JButton boutonSupprimer;
    private javax.swing.JComboBox<String> comboDurees;
    private javax.swing.JComboBox<String> comboFormations;
    private javax.swing.JComboBox<String> comboIntervenants;
    private javax.swing.JComboBox<String> comboPrestataires;
    private javax.swing.JComboBox<String> comboSalles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelTitreDuree;
    private javax.swing.JLabel labelTitreIdEmploye;
    private javax.swing.JLabel labelTitreSession;
    private javax.swing.JTable table;
    private javax.swing.JTextField texteEmploye;
    // End of variables declaration//GEN-END:variables
}
